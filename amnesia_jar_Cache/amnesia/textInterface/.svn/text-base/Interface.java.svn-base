package textInterface;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Scanner;

import amnesiaCommons.Printer;
import configuration.AmnesiaConfiguration;
import control.AmnesiaControl;
import cpu.CPUInternalRegisters;
import cpu.RegistersBank;

public class Interface {
	
	// Atributes
	private String configurationFile;			// configuration file name
	private boolean configurationFileLoaded;	// configuration file name
	private String binaryCode;					// binary code file name
	private Scanner in;							// keyboard input stream
	private String command;						// command string
	private PrintWriter outputStream;			// input and output streams
	private BufferedReader inputStream; 		// input and output streams
    private Printer printer;					// setting output buffer object     
    private AmnesiaConfiguration configuration; // configuration object
    private AmnesiaControl control; 			// Amnesia control object
	private boolean binaryCodeLoaded;

	
	
	public Interface(){
		// configuration file name
	    configurationFile = null;

	    // binary code file name
	    binaryCode = null;
	    binaryCodeLoaded = false;

	    // set default input to scanner object
	    in = new Scanner(System.in);
	    
	    // configuration file loaded flag
	    configurationFileLoaded = false;
	    
	    // command string (change information with the control object)
	    command = null;
	}
	
	public void start(String args[]){
	
	   System.out.println("AMNESIA");		
       System.out.println("A Memory Hierarchy Simulator");
       System.out.println("Version X.X 2010\n");
	    // if there is a parameter load configuration file
	    if(args.length >= 1){
	    	// setting configuration file name 
	        configurationFile = args[0];
	        configurationFileLoaded = true;
	        
	        // if there is a parameter load configuration file
	        if(args.length >= 2){
	        	// setting binary file name 
	            binaryCode = args[1];
	            binaryCodeLoaded = true;
	        }               
	    }

	   // set execution environment
	    setExecutionEnvironment();
	    	    
	    System.out.println(printer.getDataOut());
	    
	    
	    // load binary file into main memory
	    if(binaryCodeLoaded){	    	
	  
	    	try{
		    	command = String.format("lp %s", binaryCode);
		    	
		    	// send data to control
				outputStream.println(command);
				
				// get return message
				String firstMessage = inputStream.readLine();
				
				// verify return message
				if( !analyseMessage(firstMessage, printer) ){
					// if message not recognized show error message
					// this is not supposed to happen
					System.out.println("Comunication Error. Try running amnesia again.");				
				}
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
		   }
	    }
	    
	    // control always return a message
	    String returnMessage = null;
	    
		try {			
			
			createInterfaceConnection(control);
						
			do{
				// message to be sent
				System.out.print("amnesia> ");
				
				// get data from default input stream			
				command = in.nextLine();
				
				// send data to control
				outputStream.println(command);
				
				// get return message
				returnMessage = inputStream.readLine();
				
				// verify return message
				if( !analyseMessage(returnMessage, printer) ){
					// if message not recognized show error message
					// this is not supposed to happen
					System.out.println("Comunication Error. Try running amnesia again.");				
				}
								
			}while(returnMessage.compareTo("halt") != 0);
			
			
			
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e){// making sure that connection is finished 
			if(control != null){
				System.out.println("Unkwnon error..Closing connection with control object.");
				control.closeConection();
				e.printStackTrace();
				System.exit(1);
			}
		}finally{
			if(control != null){
				control.closeConection();				
			}
		}
	}


	private void setExecutionEnvironment() {
		// TODO Auto-generated method stub
		// setting output object
	    printer = new Printer();
	    	
	    // configuration object
	    configuration = null;
	    
	    // Amnesia control object
	    control = createAmenesiaControl(configuration, printer);
	}

	private boolean analyseMessage(String returnMessage, Printer printer) 
		throws IOException{
		
		// halt amnesia system
		if(returnMessage.compareTo("halt") == 0){
			System.out.println(printer.getDataOut());
			return true;
		}
		
		// default buffer message
		if(returnMessage.compareTo("getMessage") == 0){
			System.out.println(printer.getDataOut());
			return true;
		}
		
		// error buffer message
		if(returnMessage.compareTo("error") == 0){
			System.out.println(printer.getError());
			return true;
		}
		
		// error buffer message
		if(returnMessage.compareTo("commandError") == 0){
			System.out.println(printer.getError());
			return true;
		}
		
		// help message
		if(returnMessage.compareTo("help") == 0){
			return true;
		}
		
		// fatal error buffer message
		if(returnMessage.compareTo("fatalError") == 0){
			System.out.println(printer.getError());
			return true;
		}

		// cache buffer message
		if(returnMessage.compareTo("cache") == 0){
			
			String cacheString[] = printer.getCacheBuffer().split("////");
			
			
			// printing all caches in string and ignoring last space (black space)
			for(int i = 0; i < cacheString.length; ++i){
				printCacheHierarchy(cacheString[i]);				
			}
			
			
			
			return true;
		}
		
		// mainMemory buffer message
		if(returnMessage.compareTo("mainMemory") == 0){
			
			String mainMemoryData[] = printer.getMainMemoryBuffer().split(";");
			
			for(int i = 0; i < mainMemoryData.length; ++i){
				//System.out.println(mainMemoryData[i]);
				String data[] = mainMemoryData[i].split("\\ ");
				System.out.println("-----------------------------------\nBlock " + i);
				
				for(int j = 0; j < data.length; ++j){
					System.out.println( "\tAddress "+ (printer.formatHexString(Integer.toHexString((i*data.length)+j))) + "\t" + formatHexString( Integer.toHexString(new Integer(data[j])) ));
				}
			}			
			
			return true;
		}
		
		// FALTA FAZER
		// virtualMemory buffer message
		//if(returnMessage.compareTo("virtualMemory") == 0){
		if(returnMessage.startsWith("virtualMemory")){
			System.out.println(printer.getDataOut());
			
			if(returnMessage.endsWith("pt")){
				String pageTableData[] = printer.getPageTableBuffer().split(";");
				// getting the beginning of the page table (last position of pageTableData)
				int beginning = Integer.parseInt(pageTableData[pageTableData.length - 1].trim());
				
				for(int i = 0; i < pageTableData.length - 1; ++i){
					//System.out.println(mainMemoryData[i]);
					String data[] = pageTableData[i].split("\\ ");
					System.out.println("-----------------------------------\nBlock " + (i + (beginning/data.length)) );
					
					for(int j = 0; j < data.length; ++j){
						System.out.println( "\tAddress "+ ((i*data.length)+j+beginning) + "\t" + formatHexString( Integer.toHexString(new Integer(data[j])) ));
					}
				}
			}else{
				if(returnMessage.endsWith("d")){
					
					String diskData[] = printer.getDiskBuffer().split(";");
					String isEmpty[] = diskData[0].split(" "); 
					if(isEmpty[0].compareTo("null") != 0){
						for(int i = 0; i < diskData.length ; ++i){
							
							System.out.println("DISK PAGE " + (i + 1) );
							String data[] = diskData[i].split(" ");
							
							for(int j = 0; j < data.length; ++j){
								System.out.print(formatHexString( Integer.toHexString( Integer.parseInt(data[j].trim()) ) ) + " ");
							}
							System.out.println();
							
						}
					}
					
				}
				
			}
			
			
			
			
			return true;
		}

		// Statistic buffer message
		if(returnMessage.compareTo("statistics") == 0){
			System.out.println(printer.getDataOut());
			return true;
		}

		// Statistic buffer message
		if(returnMessage.compareTo("pause") == 0){
			String pauseBuffer[] = printer.getPauseBufferData();
			
			System.out.println(pauseBuffer[0]);
			System.out.println(pauseBuffer[1]);
			
			return true;
		}
		
		// cpu buffer message
		if(returnMessage.startsWith("cpu")){
			
			// RegisterBank print
			if(returnMessage.endsWith("rb")){
				printRegisterBank(printer.getCpu().split("\\|"));
			}else{// InternalRegisters print
				if(returnMessage.endsWith("int")){
					printInternalRegisters(printer.getCpu().split("\\|"));
				}else{// Cycle print
					if(returnMessage.endsWith("c")){
						printCPUCycle(printer.getCpu().split("\\|"));						
					}else{// full CPU data
						String cpuString[] = printer.getCpu().split("//");
						
						// printing register bank
						printRegisterBank(cpuString[0].split("\\|"));
						
						// printing internal registers
						printInternalRegisters(cpuString[1].split("\\|"));
						
						// printing cycle
						printCPUCycle(cpuString[2].split("\\|"));
		
						
					}
				}
				
			}
			
			
			
			return true;
		}
	
		
		if(returnMessage.startsWith("stat")){
			//System.out.println(printer.getDataOut());
			return true;
		}	
	
		
		// load new program into configuration
		if(returnMessage.compareTo("newProgram") == 0){
			

			// ends actual execution 
			String newProgram = String.format("%s %s", "lp", printer.getDataOut());
			
			// ends actual execution 
			outputStream.println("exit");
			
			control.closeConection();
					
			// use same configuration file
			configurationFileLoaded = true;

			// creates new control object
			setExecutionEnvironment();

			//create new connection
			try {
				createInterfaceConnection(control);
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				System.out.println("Error trying to connect to amnesia control");
				System.exit(0);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				System.out.println("Error trying to connect to amnesia control");
				System.exit(0);
				
			}
			System.out.println(printer.getDataOut());						
			// load main memory with new program
			outputStream.println(newProgram);
			
			System.out.println("Reconfiguring  execution environment");
			
			// get return message
			returnMessage = inputStream.readLine();
								
			return true;
		}
		
		// if message was not recognized
		return false;
		
	}
	
	private void printCacheHierarchy(String cache) {
		// TODO Auto-generated method stub
		String lines[] = cache.split("\n");
		
		// printing cache identification
		String cacheID[] = lines[0].split("/");
		
		// checking id parameters
		if(cacheID.length > 1){
			String cacheType = cacheID[0];		
			
			if(cacheType.compareTo("dataCache") == 0){
				cacheType = "Data cache";
			}else{
				if(cacheType.compareTo("instructionCache") == 0){
					cacheType = "Instruction cache";	
				}else{// TLB or unified
					
					// if it is a TLB....
					if(cacheType.endsWith("TLB")){
						if(cacheType.startsWith("instruction")){
							cacheType = "Instruction TLB";	
						}else{
							if(cacheType.startsWith("data")){
								cacheType = "Data TLB";	
							}else{
								cacheType = "Unified TLB";
							}
						}
					}else{// if its not a TLB it is a unified simple cache
						cacheType = "Unified";	
					}
					
					
				}	
			}
			
			System.out.println( cacheType +" at level " + cacheID[1]);	
		}
		
		String columns[] = lines[1].split("/");
		String blockSize[] = columns[0].split("\\ ");
		// printing cache header
		String cacheHeader;
		cacheHeader = " | Tag        | Flags      | blocks     ";
		
		//ignoring blank spaces and first block that was already considered.   
		for(int i = 0; i < blockSize.length - 4; ++i){
			cacheHeader = cacheHeader.concat("           ");
		}
		cacheHeader = cacheHeader.concat(" |\t");

		//ignoring blank spaces and first block that was already considered.
		
		String header = "";
		for(int i = 0; i < columns.length; ++i){			
			header = header.concat(cacheHeader);			
		}
		
		System.out.println("|Set       "+ header);
		
		
		
		// printing block data
		for(int i = 1; i < lines.length - 1; ++i){
			
			String data[] = lines[i].split("/");
			
			// printing set
			System.out.print( "|" + formatHexString(Integer.toHexString(i-1)));
			for(int j = 0; j < data.length; ++j){
				
				String block[] = data[j].split("\\ ");
				
				if(block.length > 2){
					// printing tag (ignoring blank space
					String formattedHex = formatHexString (Integer.toHexString( Integer.parseInt(block[1])) );			
					System.out.print( " | " + formattedHex + " | ");
					
					
					// printing modification and validation bits
					formattedHex = formatHexString (Integer.toHexString( Integer.parseInt(block[2]) ) );
					System.out.print( formattedHex + " | ");
					//String statistics[] = lines[lines.length - 1].split("/");
					for(int k = 3; k < block.length; ++k){
						
						if(Integer.parseInt(block[k]) == 0 && Integer.parseInt(block[2]) == 0 )
							formattedHex = "--  --  --";
						else formattedHex = formatHexString (Integer.toHexString( Integer.parseInt(block[k]) ) );
						System.out.print( formattedHex + " ");
					}
					
					System.out.print(" | \t");
					
				}
				
			}
			
			System.out.println();
		}
			
		String statistics[] = lines[lines.length - 1].split("/");
		
		if(statistics.length > 1){
			System.out.print( "|Hit rate = " + statistics[0] + "\t | ");
			System.out.print( "Number of access = " + statistics[1] + "\n");
		}
		System.out.println();
		
	}

	private String formatHexString(String hexString) {
		// TODO Auto-generated method stub
		String invalid0 = "0";
		String result = "0x";
		
		// inserting 0 considering word size representation
		for(int i = hexString.length(); i < 8; ++i){		
			hexString = invalid0.concat(hexString);
		}
				
		return result.concat(hexString);
	}

	private void printCPUCycle(String[] cycle) {
		// TODO Auto-generated method stub
		for(int i = 0; i < cycle.length; ++i){
			System.out.print("\n\nCPU cycle " + cycle[i]);
		}
		System.out.println();
	}

	private void printInternalRegisters(String[] internalRegisters) {
		// TODO Auto-generated method stub
		System.out.println("\n\nInternal CPU registers\n");
		for(int i = 0; i < internalRegisters.length; ++i){
			System.out.print("Internal register[" + CPUInternalRegisters.internalRegNames[i] + "] = 0x" + 
					Integer.toHexString(new Integer(internalRegisters[i])) + "\t");
			
			if( i%3 == 2){
				System.out.println();
			}
		}
		System.out.println();
	}

	private void createInterfaceConnection(AmnesiaControl control) 
		throws UnknownHostException, IOException {
		// creating connection socket			
		InetAddress host = InetAddress.getByName("localhost");
		Socket socket = new Socket(host,AmnesiaControl.PORT);		
					
		// starting control thread
		Thread thread = new Thread(control);
		thread.start();
			
		// setting input and output stream
		outputStream = new PrintWriter(socket.getOutputStream(), true);
		inputStream = new BufferedReader( new InputStreamReader(socket.getInputStream()));		
	}

	private AmnesiaControl createAmenesiaControl(AmnesiaConfiguration configuration, Printer printer) {
		
		// create a new control instance
		AmnesiaControl control;
		
	    do{
	    	// check configuration if file is loaded  
	        if(configurationFileLoaded == false){
	        	
	            System.out.print("Enter configuration file: ");
	            configurationFile = in.nextLine();
	            System.out.println("Opening configuration file " + configurationFile);
	            
	        }
	        
	        // instanciate configuration object
	        configuration = new AmnesiaConfiguration(printer);
	
	        
	        // configure Amnesia system
	        control = configuration.configure(configurationFile);
	        
	        
	        // check if configuration was accepted 
	        if(control == null){
	            configurationFileLoaded = false;
	            System.out.println(printer.getError());                
	        }
	                               
	
	    }while( (control == null) );
	
		
	    return control;
	}

	private void printRegisterBank(String registerBank[]){
		System.out.println("Register bank");
		for(int i = 0; i < registerBank.length; ++i){
			System.out.print("Register[" + RegistersBank.regNames[i] + "] = 0x" +
					Integer.toHexString( new Integer(registerBank[i]) ) + "\t");
			if( i%4 == 3){
				System.out.println();
			}
		}
		System.out.println();
	}

	public boolean loadConfiguration(){
	
		return true;
	}


}
